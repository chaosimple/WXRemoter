#!wing
#!version=5.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('main.py'): {331: (0,
        None,
        1,
        0)}}
debug.named-entry-points = (1,
                            {'a': ({'key-binding-debug': 'Alt-1'},
                                   {'auto-show': False,
                                    'launch-id': ('project',
        (u'',
         '')),
                                    'loc': loc('main.py')})})
debug.show-args-dialog = {loc('main.py'): False}
gui.keymap-override = {'Alt-1': 'debug-named-entry-point(name="a")'}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'Ez5xc1HreXwvFwZZVgnIgqVReX'\
        'dn0lMt',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [3,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.13812600969305333,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(0,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../../D:/Anaconda2/Lib/logging/__init__.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../D:/Anaconda2/Lib/logging/__init__.py'),
                      'addLevelName')]},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/algFile'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/algFile'),
                      'calc_')]},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/algcluster'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/algcluster'),
                      'calc')]},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/class'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/class.ctx/def'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/def'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/file'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/ltalg'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/ltalg'),
                      'calc')]},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/module.ctx/class'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/module.ctx/def'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/stalg'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../Library/Application Support/Wing IDE/v5/snippets/py/stalg'),
                      'calc')]},
        loc('../OADetection/MLOAD/main.py'): {'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../OADetection/MLOAD/main.py'),
                             'gen_doc')]],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/main.py'),
                      'calculate')]},
        loc('../OADetection/MLOAD/mload/__init__.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/algorithmBase/ODAlgBase.py'): {'expa'\
        'nded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/algorithmBase/ODAlgBase.py'),
                      'algorithmBase')]},
        loc('../OADetection/MLOAD/mload/algorithmBase/scoreOutlierDetectionAlgBase.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/algorithmBase/scoreOutlierDetectionAlgBase.py'),
                      'scoreOutlierDetectionAlgBase')]},
        loc('../OADetection/MLOAD/mload/base/__init__.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/base/base.py'),
                      '')]},
        loc('../OADetection/MLOAD/mload/base/base.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/base/base.py'),
                      'BaseAlgorithm')]},
        loc('../OADetection/MLOAD/mload/base/base_oad_alg.py'): {'expanded-n'\
        'odes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/base/base_oad_alg.py'),
                      'BaseLabelTypeODAlgorithm')]},
        loc('../OADetection/MLOAD/mload/base/bases.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/base/bases.py'),
                      'BaseAlgorithm')]},
        loc('../OADetection/MLOAD/mload/base/cluster_base'): {'expanded-node'\
        's': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/base/cluster_base.py'): {'expanded-n'\
        'odes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/base/cluster_base.py'),
                      'BaseCluster')]},
        loc('../OADetection/MLOAD/mload/base/mixin.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/base/mixin.py'),
                      'ParallelRunMixin')]},
        loc('../OADetection/MLOAD/mload/base/oad_base.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/base/oad_base.py'),
                      'BaseLabelTypeOAD')]},
        loc('../OADetection/MLOAD/mload/baseAlgorithms/__init__.py'): {'expa'\
        'nded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/bases.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/cluster/DP_Cluster.py'): {'expanded-'\
        'nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/cluster/DP_Cluster.py'),
                      'DP_Cluster')]},
        loc('../OADetection/MLOAD/mload/cluster/__init__.py'): {'expanded-no'\
        'des': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/cluster/dbscan.py'),
                      '')]},
        loc('../OADetection/MLOAD/mload/cluster/dbscan.py'): {'expanded-node'\
        's': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/cluster/dbscan.py'),
                      'DBSCAN')]},
        loc('../OADetection/MLOAD/mload/cluster/dp.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/cluster/dp.py'),
                      'DPCluster')]},
        loc('../OADetection/MLOAD/mload/cluster/kmeans.py'): {'expanded-node'\
        's': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/cluster/kmeans.py'),
                      'KMeans')]},
        loc('../OADetection/MLOAD/mload/cluster/kmedoids.py'): {'expanded-no'\
        'des': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/cluster/kmedoids.py'),
                      'KMedoids')]},
        loc('../OADetection/MLOAD/mload/config.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/config.py'),
                      'MAC_BASE_DIR')]},
        loc('../OADetection/MLOAD/mload/dataset/__init__.py'): {'expanded-no'\
        'des': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/dataset/cluster_dataset.py'),
                      '')]},
        loc('../OADetection/MLOAD/mload/dataset/cluster_dataset.py'): {'expa'\
        'nded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/dataset/cluster_dataset.py'),
                      'ClusterDataset')]},
        loc('../OADetection/MLOAD/mload/dataset/dataset_base.py'): {'expande'\
        'd-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/dataset/dataset_base.py'),
                      'BaseDataset')]},
        loc('../OADetection/MLOAD/mload/dataset/example_dataset.py'): {'expa'\
        'nded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('../OADetection/MLOAD/mload/dataset/example_dataset.py'),
                             'Dataset')]],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/dataset/example_dataset.py'),
                      'Dataset')]},
        loc('../OADetection/MLOAD/mload/dataset/oa_dataset.py'): {'expanded-'\
        'nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/dataset/oa_dataset.py'),
                      'ID_COLUMN_NAME')]},
        loc('../OADetection/MLOAD/mload/example/LDF_EXEMPLE.py'): {'expanded'\
        '-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/example/LDF_EXEMPLE.py'),
                      'LDF')]},
        loc('../OADetection/MLOAD/mload/example/exp_ldf.py'): {'expanded-nod'\
        'es': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/example/exp_ldf.py'),
                      'LDF')]},
        loc('../OADetection/MLOAD/mload/example/exp_lof.py'): {'expanded-nod'\
        'es': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/example/exp_lof.py'),
                      'LOF')]},
        loc('../OADetection/MLOAD/mload/example/template.py'): {'expanded-no'\
        'des': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/example/template.py'),
                      'TemplateLTAlgorithm')]},
        loc('../OADetection/MLOAD/mload/example/testLOF.py'): {'expanded-nod'\
        'es': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/externals/__init__.py'): {'expanded-'\
        'nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/externals/joblib/_parallel_backends.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/externals/joblib/_parallel_backends.py'),
                      'AutoBatchingMixin')]},
        loc('../OADetection/MLOAD/mload/externals/joblib/externals/loky/_base.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/externals/joblib/externals/loky/_base.py'),
                      'ALL_COMPLETED')]},
        loc('../OADetection/MLOAD/mload/externals/joblib/parallel.py'): {'ex'\
        'panded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/externals/joblib/parallel.py'),
                      'BACKENDS')]},
        loc('../OADetection/MLOAD/mload/oa_detect/NLOD.py'): {'expanded-node'\
        's': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/oa_detect/NLOD.py'),
                      'NLOD')]},
        loc('../OADetection/MLOAD/mload/oa_detect/density/inflo.py'): {'expa'\
        'nded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/oa_detect/density/inflo.py'),
                      'INFLO')]},
        loc('../OADetection/MLOAD/mload/oa_detect/density/loci.py'): {'expan'\
        'ded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/oa_detect/density/loci.py'),
                      'LOCI')]},
        loc('../OADetection/MLOAD/mload/oa_detect/density/simplified_lof.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/oa_detect/density/simplified_lof.py'),
                      'SimplifiedLOF')]},
        loc('../OADetection/MLOAD/mload/oa_detect/density_based/LOCI.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('../OADetection/MLOAD/mload/oa_detect/density_based/LOCI.py'),
                             'LOCI')]],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/oa_detect/density_based/LOCI.py'),
                      'LOCI')]},
        loc('../OADetection/MLOAD/mload/oa_detect/density_based/LOF.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('../OADetection/MLOAD/mload/oa_detect/density_based/LOF.py'),
                             'LOF')]],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/oa_detect/density_based/LOF.py'),
                      'LOF')]},
        loc('../OADetection/MLOAD/mload/oa_detect/density_based/SimplifiedLOF.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [None],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/oa_detect/density_based/ldf.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('../OADetection/MLOAD/mload/oa_detect/density_based/ldf.py'),
                             'LDF')]],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/oa_detect/density_based/ldf.py'),
                      'LDF')]},
        loc('../OADetection/MLOAD/mload/oa_detect/markov/chaos.py'): {'expan'\
        'ded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/oa_detect/markov/chaos.py'),
                      'calc_dominant_eigenvector')]},
        loc('../OADetection/MLOAD/mload/oa_detect/markov/hcod.py'): {'expand'\
        'ed-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/oa_detect/markov/hcod.py'),
                      'HCOD')]},
        loc('../OADetection/MLOAD/mload/oa_detect/markov/outrank.py'): {'exp'\
        'anded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/oa_detect/markov/outrank.py'),
                      'calc_stationary_distribution_by_transition_mat')]},
        loc('../OADetection/MLOAD/mload/outlierdetection/NLOD.py'): {'expand'\
        'ed-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/outlierdetection/NLOD.py'),
                      'NLOD')]},
        loc('../OADetection/MLOAD/mload/outlierdetection/density_based/LDF.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../OADetection/MLOAD/mload/outlierdetection/density_based/LDF.py'),
                             'calc_LDF_Score')]],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/outlierdetection/density_based/LDF.py'),
                      'calc_LDF_Score')]},
        loc('../OADetection/MLOAD/mload/outlierdetection/markov/OutRank.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/outlierdetection/markov/OutRank.py'),
                      'calcOutRank_A_Score_byDataset')]},
        loc('../OADetection/MLOAD/mload/result/__init__.py'): {'expanded-nod'\
        'es': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/result/parallel.py'),
                      '')]},
        loc('../OADetection/MLOAD/mload/result/parallel.py'): {'expanded-nod'\
        'es': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/result/parallel.py'),
                      'ParallelRun')]},
        loc('../OADetection/MLOAD/mload/result/result_db.py'): {'expanded-no'\
        'des': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/result/result_db.py'),
                      'logger')]},
        loc('../OADetection/MLOAD/mload/result/result_evaluation.py'): {'exp'\
        'anded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/result/result_evaluation.py'),
                      'Evaluation')]},
        loc('../OADetection/MLOAD/mload/result/result_model.py'): {'expanded'\
        '-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/result/result_model.py'),
                      'Base')]},
        loc('../OADetection/MLOAD/mload/result/transformer.py'): {'expanded-'\
        'nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/result/transformer.py'),
                      'Transformer')]},
        loc('../OADetection/MLOAD/mload/result/visual.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../OADetection/MLOAD/mload/result/visual.py'),
                             'list_color_names')]],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/result/visual.py'),
                      'DPI')]},
        loc('../OADetection/MLOAD/mload/utilities/AlgorithmResult.py'): {'ex'\
        'panded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../OADetection/MLOAD/mload/utilities/AlgorithmResult.py'),
                             'algFuncWrapper')]],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/utilities/AlgorithmResult.py'),
                      'algFuncWrapper')]},
        loc('../OADetection/MLOAD/mload/utilities/DatasetUtils.py'): {'expan'\
        'ded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/utilities/DatasetUtils.py'),
                      'dataName')]},
        loc('../OADetection/MLOAD/mload/utilities/Utils.py'): {'expanded-nod'\
        'es': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/utilities/Utils.py'),
                      'axisLabelFont')]},
        loc('../OADetection/MLOAD/mload/utilities/Visualization.py'): {'expa'\
        'nded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/utilities/Visualization.py'),
                      'dataName')]},
        loc('../OADetection/MLOAD/mload/utilities/config.py'): {'expanded-no'\
        'des': [],
        'selected-nodes': [[('generic attribute',
                             loc('../OADetection/MLOAD/mload/utilities/config.py'),
                             'WIN_SQL_FILE_PATH')]],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/utilities/config.py'),
                      'Config')]},
        loc('../OADetection/MLOAD/mload/utilities/logging_conf.py'): {'expan'\
        'ded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/utilities/logging_conf.py'),
                      'basic_fmt')]},
        loc('../OADetection/MLOAD/mload/utilities/metric.py'): {'expanded-no'\
        'des': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/utilities/metric.py'),
                      'calc_distance_matrix')]},
        loc('../OADetection/MLOAD/mload/utilities/metrics.py'): {'expanded-n'\
        'odes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/utilities/metrics.py'),
                      'calc_distance_matrix')]},
        loc('../OADetection/MLOAD/mload/utilities/parallel.py'): {'expanded-'\
        'nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/utilities/result_evaluation.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/utilities/result_evaluation.py'),
                      'Evaluation')]},
        loc('../OADetection/MLOAD/mload/utilities/transformer.py'): {'expand'\
        'ed-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/MLOAD/mload/utils/config.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/utils/config.py'),
                      'Config')]},
        loc('../OADetection/MLOAD/mload/utils/utils.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../OADetection/MLOAD/mload/utils/utils.py'),
                      'logger')]},
        loc('../OADetection/MLOAD/mload/visual/basic.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/MLOAD/mload/visual/basic.py'),
                      'BasicVisual')]},
        loc('../OADetection/MLOAD/mload/visual/paper_visual/LGRWOD.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../OADetection/MLOAD/mload/visual/paper_visual/LGRWOD.py'),
                      'circarrow')]},
        loc('../OADetection/MLOAD/setup.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../OADetection/example_dataset.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../OADetection/example_dataset.py'),
                      'Bunch')]},
        loc('../OADetection/mlod/setup.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../../../anaconda/lib/python2.7/contextlib.py'): {'expanded-nod'\
        'es': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../anaconda/lib/python2.7/contextlib.py'),
                      'closing')]},
        loc('../../../anaconda/lib/python2.7/copy_reg.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/copy_reg.py'),
                      'add_extension')]},
        loc('../../../anaconda/lib/python2.7/posixpath.py'): {'expanded-node'\
        's': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/posixpath.py'),
                      'abspath')]},
        loc('../../../anaconda/lib/python2.7/site-packages/numpy/core/_methods.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../anaconda/lib/python2.7/site-packages/numpy/core/_methods.py'),
                      'umr_all')]},
        loc('../../../anaconda/lib/python2.7/site-packages/numpy/core/numeric.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/site-packages/numpy/core/numeric.py'),
                      'allclose')]},
        loc('../../../anaconda/lib/python2.7/site-packages/pandas/io/parsers.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/site-packages/pandas/io/parsers.py'),
                      'count_empty_vals')]},
        loc('../../../anaconda/lib/python2.7/site-packages/scipy/spatial/distance.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/site-packages/scipy/spatial/distance.py'),
                      'braycurtis')]},
        loc('../../../anaconda/lib/python2.7/site-packages/sklearn/datasets/base.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/site-packages/sklearn/datasets/base.py'),
                      'clear_data_home')]},
        loc('../../../anaconda/lib/python2.7/site-packages/sklearn/metrics/classification.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/site-packages/sklearn/metrics/classification.py'),
                      'accuracy_score')]},
        loc('../../../anaconda/lib/python2.7/site-packages/sklearn/metrics/pairwise.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/site-packages/sklearn/metrics/pairwise.py'),
                      'additive_chi2_kernel')]},
        loc('../../../anaconda/lib/python2.7/site-packages/sklearn/metrics/ranking.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/site-packages/sklearn/metrics/ranking.py'),
                      'auc')]},
        loc('../../../anaconda/lib/python2.7/site-packages/sklearn/utils/__init__.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../anaconda/lib/python2.7/site-packages/sklearn/utils/arpack.py'),
                      '')]},
        loc('../../../anaconda/lib/python2.7/site-packages/sklearn/utils/validation.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/site-packages/sklearn/utils/validation.py'),
                      'assert_all_finite')]},
        loc('../../../anaconda/lib/python2.7/site-packages/sqlalchemy/engine/default.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../anaconda/lib/python2.7/site-packages/sqlalchemy/engine/default.py'),
                      'AUTOCOMMIT_REGEXP')]},
        loc('../../../anaconda/lib/python2.7/site-packages/sqlalchemy/orm/query.py'): {''\
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../anaconda/lib/python2.7/site-packages/sqlalchemy/orm/query.py'),
                      'AliasOption')]},
        loc('../../../anaconda/lib/python2.7/subprocess.py'): {'expanded-nod'\
        'es': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../anaconda/lib/python2.7/subprocess.py'),
                      'call')]},
        loc('unknown:<untitled> #2'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': [('class def',
        loc('unknown:<untitled> #1'),
        'LOF')]},
        loc('unknown:<untitled> #3'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('unknown:<untitled> #4'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': [(u'file',
                 u'all',
                 u'')]}}),
                              ('refactoring',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.33673469387755106,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'os.path.exists',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'vbase',
                                       'fReverse': False,
                                       'fSearchText': u'__arti',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha'}),
                     ('uses',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'sel-line': 2,
                       'sel-line-start': 25,
                       'selection_end': 25,
                       'selection_start': 25}),
                     ('debug-probe',
                      'wide',
                      1,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 116,
                       'folded-linenos': [],
                       'history': {u'file:/Users/chao/Python Codes/Github/WXRemoter/main.py': [''\
        'os.path.basename(output_filename)\n',
        'os.path.dirname(output_filename)\n',
        'os.path.pardir(source_dir)\n',
        'print os.path.abspath(os.path.join(source_dir , os.pardir))\n',
        'source_dir\n',
        "t = '/Users/chao/Desktop/test/cmp.zip'\n",
        "t = '.'\n",
        'print os.path.abspath(os.path.join(t , os.pardir))\n',
        "os.path.abspath('.')\n",
        'os.pardir\n',
        'source_dir.split()\n',
        'source_dir.split(os.path.sep)\n',
        'os.path.split(source_dir)\n',
        'os.path.sep\n',
        't = source_dir.split(os.path.sep)[-1]\n',
        't\n',
        't.title\n',
        't.title()\n',
        "t = 'rm.gz.vb.zip'\n",
        "datetime.datetime.now('%Y-%m-%d %H:%M:%S')\n",
        "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n",
        "output_filename = os.path.join(parent_dir,\n                       "\
        "                '{}_{}.zip'.format(source_dir.split(os.path.sep)[-1"\
        "],\n                                       datetime.datetime.now()."\
        "strftime('%Y-%m-%d_%H:%M:%S')))\n\n",
        "p = '/Users/chao/Desktop/test'\n",
        "p = '/Users/chao/Desktop/test/cmp1.zip'\n",
        'os.path.basename(p)\n',
        "p = '/Users/chao/Desktop/test/cmp1.gz.tar.zip'\n",
        'os.path.splitext(p)\n',
        'output_filename\n',
        'pre_len = len(os.path.dirname(source_dir))\n',
        'pre_len\n',
        'os.path.dirname(source_dir)\n',
        'os.walk(source_dir)\n',
        'for t in os.walk(source_dir):\n    print t\n\n',
        'str_msg\n',
        "str_msg.startswith('a')\n",
        "str_msg.startswith(u'a')\n",
        'Command.SYS_OPT\n',
        'str_msg.startswith(Command.SYS_OPT)\n',
        'type(str_msg)\n',
        't = str_msg\n',
        't.startswith(Command.SYS_OPT)\n',
        's = str(t)\n',
        'from_user_name\n',
        "msg['ToUserName']\n",
        "t = msg['ToUserName']\n",
        'get_user_name(t)\n',
        'print from_user_name\n',
        'msg\n',
        'print msg\n',
        'for k in msg.keys():\n    print k, msg[k]\n\n',
        'u = msg[User]\n',
        "u = msg['User']\n",
        'u.keys()\n',
        'for kk in u.keys():\n    print kk, u[kk]\n\n',
        's = itchat.search_friends()\n',
        's\n',
        'type(s)\n',
        's = itchat.get_friends(update = True)\n',
        'len(s)\n',
        's[0]\n',
        "s[0]['UserName']\n",
        "s[0]['NickName']\n",
        "msg['NickName']\n",
        "msg['User']['NickName']\n",
        "print msg['User']['NickName']\n"]},
                       'launch-id': None,
                       'sel-line': 124,
                       'sel-line-start': 10018,
                       'selection_end': 10018,
                       'selection_start': 10018}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 3,
                       'sel-line-start': 201,
                       'selection_end': 201,
                       'selection_start': 201}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': 'cmd-yhBIBwMJYhYYNTxN'})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('command.py'),
        {'attrib-starts': [('Command',
                            26)],
         'first-line': 21,
         'folded-linenos': [],
         'sel-line': 33,
         'sel-line-start': 553,
         'selection_end': 573,
         'selection_start': 573},
        1530420536.380442],
        [loc('main.py'),
         {'attrib-starts': [('text_reply',
                             133)],
          'first-line': 171,
          'folded-linenos': [],
          'sel-line': 177,
          'sel-line-start': 4402,
          'selection_end': 4435,
          'selection_start': 4435},
         1530420571.985788],
        [loc('command.py'),
         {'attrib-starts': [('Command',
                             26)],
          'first-line': 21,
          'folded-linenos': [],
          'sel-line': 35,
          'sel-line-start': 664,
          'selection_end': 701,
          'selection_start': 701},
         1530420645.086562],
        [loc('main.py'),
         {'attrib-starts': [('sys_operator',
                             91)],
          'first-line': 111,
          'folded-linenos': [],
          'sel-line': 119,
          'sel-line-start': 2439,
          'selection_end': 2467,
          'selection_start': 2467},
         1530422704.182715],
        [loc('os_operator.py'),
         {'attrib-starts': [('OSOperator',
                             26),
                            ('OSOperator.copy_file',
                             119)],
          'first-line': 106,
          'folded-linenos': [],
          'sel-line': 134,
          'sel-line-start': 4070,
          'selection_end': 4089,
          'selection_start': 4089},
         1530422713.69521],
        [loc('main.py'),
         {'attrib-starts': [('sys_operator',
                             91)],
          'first-line': 87,
          'folded-linenos': [],
          'sel-line': 91,
          'sel-line-start': 1871,
          'selection_end': 1887,
          'selection_start': 1875},
         1530422869.427506],
        [loc('main.py'),
         {'attrib-starts': [('do_sys_task',
                             91)],
          'first-line': 87,
          'folded-linenos': [],
          'sel-line': 91,
          'sel-line-start': 1871,
          'selection_end': 1890,
          'selection_start': 1887},
         1530422896.622166],
        [loc('main.py'),
         {'attrib-starts': [('text_reply',
                             187)],
          'first-line': 220,
          'folded-linenos': [],
          'sel-line': 239,
          'sel-line-start': 6305,
          'selection_end': 6344,
          'selection_start': 6344},
         1530425117.030676],
        [loc('main.py'),
         {'attrib-starts': [('text_reply',
                             187)],
          'first-line': 209,
          'folded-linenos': [],
          'sel-line': 225,
          'sel-line-start': 6021,
          'selection_end': 6053,
          'selection_start': 6040},
         1530427780.467339],
        [loc('main.py'),
         {'attrib-starts': [('get_user_name',
                             41)],
          'first-line': 190,
          'folded-linenos': [],
          'sel-line': 50,
          'sel-line-start': 1014,
          'selection_end': 1032,
          'selection_start': 1032},
         1530428180.365139],
        [loc('main.py'),
         {'attrib-starts': [('get_user_name',
                             41)],
          'first-line': 38,
          'folded-linenos': [],
          'sel-line': 55,
          'sel-line-start': 1180,
          'selection_end': 1218,
          'selection_start': 1218},
         1530428390.416644],
        [loc('main.py'),
         {'attrib-starts': [('text_reply',
                             191)],
          'first-line': 228,
          'folded-linenos': [],
          'sel-line': 237,
          'sel-line-start': 6516,
          'selection_end': 6553,
          'selection_start': 6553},
         1530431801.710021],
        [loc('main.py'),
         {'attrib-starts': [('mp_auto_reply',
                             256)],
          'first-line': 253,
          'folded-linenos': [],
          'sel-line': 269,
          'sel-line-start': 7306,
          'selection_end': 7306,
          'selection_start': 7306},
         1530431866.322603],
        [loc('../../../anaconda/lib/python2.7/site-packages/itchat/storage/messagequeue.py'),
         {'attrib-starts': [('Message',
                             14),
                            ('Message.__getitem__',
                             20)],
          'first-line': 11,
          'folded-linenos': [],
          'sel-line': 25,
          'sel-line-start': 709,
          'selection_end': 709,
          'selection_start': 709},
         1530431888.354745],
        [loc('main.py'),
         {'attrib-starts': [('mp_auto_reply',
                             256)],
          'first-line': 253,
          'folded-linenos': [],
          'sel-line': 269,
          'sel-line-start': 7306,
          'selection_end': 7340,
          'selection_start': 7327},
         1530431894.185116],
        [loc('main.py'),
         {'attrib-starts': [('get_user_name',
                             41)],
          'first-line': 42,
          'folded-linenos': [],
          'sel-line': 41,
          'sel-line-start': 695,
          'selection_end': 712,
          'selection_start': 699},
         1530431917.431702],
        [loc('command.py'),
         {'attrib-starts': [('Command',
                             26)],
          'first-line': 21,
          'folded-linenos': [],
          'sel-line': 35,
          'sel-line-start': 664,
          'selection_end': 701,
          'selection_start': 701},
         1530431919.338008],
        [loc('main.py'),
         {'attrib-starts': [('get_user_name',
                             41)],
          'first-line': 33,
          'folded-linenos': [],
          'sel-line': 41,
          'sel-line-start': 695,
          'selection_end': 712,
          'selection_start': 699},
         1530431929.700853],
        [loc('main.py'),
         {'attrib-starts': [('text_reply',
                             191)],
          'first-line': 226,
          'folded-linenos': [],
          'sel-line': 234,
          'sel-line-start': 6466,
          'selection_end': 6466,
          'selection_start': 6466},
         1530432108.075285],
        [loc('command.py'),
         {'attrib-starts': [('Command',
                             26)],
          'first-line': 21,
          'folded-linenos': [],
          'sel-line': 39,
          'sel-line-start': 790,
          'selection_end': 830,
          'selection_start': 830},
         1530432165.068895]],
        20),
        'current-loc': loc('main.py'),
        'editor-state-list': [(loc('main.py'),
                               {'attrib-starts': [('do_sys_task',
        102)],
                                'first-line': 120,
                                'folded-linenos': [],
                                'sel-line': 127,
                                'sel-line-start': 3270,
                                'selection_end': 3343,
                                'selection_start': 3343}),
                              (loc('command.py'),
                               {'attrib-starts': [('Command',
        26)],
                                'first-line': 21,
                                'folded-linenos': [],
                                'sel-line': 39,
                                'sel-line-start': 790,
                                'selection_end': 830,
                                'selection_start': 830}),
                              (loc('os_operator.py'),
                               {'attrib-starts': [('OSOperator',
        26),
        ('OSOperator.copy_file',
         119)],
                                'first-line': 106,
                                'folded-linenos': [],
                                'sel-line': 134,
                                'sel-line-start': 4070,
                                'selection_end': 4089,
                                'selection_start': 4089})],
        'has-focus': True,
        'locked': False},
        [loc('main.py'),
         loc('command.py'),
         loc('os_operator.py')]),
                               'open_files': [u'os_operator.py',
        u'command.py',
        u'main.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.23288973384030418,
                           1: 0.5,
                           2: 0.5},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (40,
                         26,
                         1267,
                         755)}]}
guimgr.recent-documents = [loc('main.py'),
                           loc('command.py'),
                           loc('os_operator.py')]
search.search-history = [u'os.path.exists']
